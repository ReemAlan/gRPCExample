@page "/"

@inject Greeter.GreeterClient GreeterClient
@inject People.PeopleClient PeopleClient

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h3>Regular gRPC Messages</h3> 
<h5>@GrpcResponse</h5>

Welcome to your new app.

@if (People == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in People)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Streaming Server gRPC Messages</h3> 

<ul>
    @foreach (var person in PeopleStream)
    {
        <li>@person</li>
    }
</ul>

<h3>Bi-directional Streaming gRPC Messages</h3> 

<ul>
    @foreach (var person in StreamBothWays)
    {
        <li>@person</li>
    }
</ul>

@code {
    public string? GrpcResponse { get; set; }
    public List<Person>? People { get; set; }
    public List<string> PeopleStream { get; set; } = new();
    public List<string> StreamBothWays { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        GrpcResponse = (await GreeterClient.SayHelloAsync(new HelloRequest { Name = "Reem" })).Message;
        People = (await PeopleClient.GetPeopleAsync(new Empty())).People.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        Console.WriteLine("Entered OnAfterRenderAsync with firstRender={0}", firstRender);

        if (firstRender)
        {
            @* Server streaming *@
            var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            using var streamingServerCall = PeopleClient.GetPeopleStream(new Empty(), cancellationToken: cts.Token);
            try
            {
                await foreach (var person in streamingServerCall.ResponseStream.ReadAllAsync(cancellationToken: cts.Token))
                {
                    PeopleStream.Add($"{person.Id} | {person.FirstName} | {person.LastName}");
                    Console.WriteLine($"{person.Id} | {person.FirstName} | {person.LastName}");
                }
            }
            catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
            {               
                PeopleStream.Add("Request cancelled.");
            }

            @* Bi-directional streaming *@
            var cts2 = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            using var bidirectionalStreamingCall = PeopleClient.GetPeopleStreamers(cancellationToken: cts2.Token);
            try
            {
                for (int i = 50; !cts2.Token.IsCancellationRequested; i++)
                {
                    Console.WriteLine("About to send first request to server");
                    await bidirectionalStreamingCall.RequestStream.WriteAsync(new StreamerClientRequest { Start = i});
                    @* while (await bidirectionalStreamingCall.ResponseStream.MoveNext())
                    {
                        Console.WriteLine("Here");
                        Person p = bidirectionalStreamingCall.ResponseStream.Current;
                        StreamBothWays.Add($"{p.Id} | {p.FirstName} | {p.LastName}");
                    } *@

                    Console.WriteLine(await bidirectionalStreamingCall.ResponseStream.MoveNext());
                }
            }
            catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
            {
                StreamBothWays.Add("Request cancelled 2.");
            }

            StateHasChanged();
        }
    }
}