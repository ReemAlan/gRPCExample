@page "/"

@inject Greeter.GreeterClient GreeterClient
@inject People.PeopleClient PeopleClient

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h3>Regular gRPC Messages</h3> 
<h5>@GrpcResponse</h5>

Welcome to your new app.

@if (People == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in People)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Streaming Server gRPC Messages</h3> 

<ul>
    @foreach (var person in PeopleStream)
    {
        <li>@person</li>
    }
</ul>

<h3>Client Streaming gRPC Messages</h3>

<ul>
    @if (ClientStreamPeople != null)
    {
        foreach (var person in ClientStreamPeople)
        {
            <li>@person.Id || @person.FirstName || @person.LastName</li>
        }
    }
</ul>

<h3>Bi-directional Streaming gRPC Messages</h3> 

<ul>
    @foreach (var person in StreamBothWays)
    {
        <li>@person</li>
    }
</ul>

@code {
    public string? GrpcResponse { get; set; }
    public List<Person>? People { get; set; }
    public List<string> PeopleStream { get; set; } = new();
    public List<Person>? ClientStreamPeople { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GrpcResponse = (await GreeterClient.SayHelloAsync(new HelloRequest { Name = "Reem" })).Message;
        People = (await PeopleClient.GetPeopleAsync(new Empty())).People.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        Console.WriteLine("Entered OnAfterRenderAsync with firstRender={0}", firstRender);

        if (firstRender)
        {
            @* Server streaming *@
            var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            using var streamingServerCall = PeopleClient.GetPeopleServerStream(new Empty(), cancellationToken: cts.Token);
            try
            {
                await foreach (var person in streamingServerCall.ResponseStream.ReadAllAsync(cancellationToken: cts.Token))
                {
                    PeopleStream.Add($"{person.Id} | {person.FirstName} | {person.LastName}");
                    Console.WriteLine($"{person.Id} | {person.FirstName} | {person.LastName}");
                }
            }
            catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
            {               
                PeopleStream.Add("Request cancelled.");
            }

            @* Client streaming *@
            using var clientStreamingCall = PeopleClient.GetPeopleClientStream();
            try 
            {
                for (int i = 50; i <= 60; i++)
                {
                    await clientStreamingCall.RequestStream.WriteAsync(new StreamerClientRequest { Start = i });
                }
                await clientStreamingCall.RequestStream.CompleteAsync();
                ClientStreamPeople = (await clientStreamingCall.ResponseAsync).People.ToList();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            
            @* Bi-directional streaming *@
            var cts2 = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            using var bidirectionalStreamingCall = PeopleClient.GetPeopleStreamers(cancellationToken: cts2.Token);
            Console.WriteLine("Opened communication with server");
            try
            {
                var readTask = Task.Run(async () =>
                {
                    await foreach (var person in bidirectionalStreamingCall.ResponseStream.ReadAllAsync())
                    {
                        Console.WriteLine(person);
                    }
                });

                var writeTask = Task.Run(async () => 
                {
                    int count = 100;
                    while (!cts2.Token.IsCancellationRequested)
                    {
                        await bidirectionalStreamingCall.RequestStream.WriteAsync(new StreamerClientRequest { Start = count++ });
                        await Task.Delay(500);
                    }
                    await bidirectionalStreamingCall.RequestStream.CompleteAsync();
                });
                
                await Task.WhenAll(writeTask, readTask);
            }
            catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
            {
                StreamBothWays.Add("Bidirectional request cancelled.");
            }

            StateHasChanged();
        }
    }
}